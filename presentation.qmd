---
title: "Forests in Transition: Visualizing Global Deforestation"
subtitle: "INFO 526 - Fall 2023 - Project 1"
author: "The Plotting Pandas - Megan, Shakir, Maria, Eshaan, Bharath"
title-slide-attributes:
  data-background-image: images/presentation/rainforest_background_4.png
  data-background-size: stretch
  data-background-opacity: "0.8"
  data-slide-number: none
format:
  revealjs:
    theme:  ['data/customtheming.scss']
    transition: slide
    background-transition: fade
    logo: images\pandas_logo.png
    footer: "[üêº The Plotting Pandas](https://info526-dataviz.github.io/project-01-The-Plotting-Pandas/)"
    scrollable: true

editor: visual
execute:
  warning: false
  echo: false
---

```{r load_packages, message=FALSE, include=FALSE}
# GETTING THE LIBRARIES
if (!require(pacman))
  install.packages(pacman)


pacman::p_load(tidyverse,
               tidytuesdayR,
               dplyr,
               janitor,
               dlookr,        # Exploratory data analysis
               here,          # Standardizes paths to data
               ggpubr,
               maps,
               gganimate,
               imager,
               magick,
               gifski,
               patchwork)
```

```{r ggplot_setup, message=FALSE, include=FALSE}
# setting theme for ggplot2
ggplot2::theme_set(ggplot2::theme_minimal(base_size = 14, base_family = "sans"))

# setting width of code output
options(width = 65)

# setting figure parameters for knitr
knitr::opts_chunk$set(
  fig.width = 8,        # 8" width
  fig.asp = 0.618,      # the golden ratio
  fig.retina = 1,       # dpi multiplier for displaying HTML output on retina
  fig.align = "center", # center align figures
  dpi = 140             # higher dpi, sharper image
)
```

```{r load_dataset, message=FALSE, include=FALSE}

# Getting all the underlying data in the dataset
forest        <- read.csv(here("data", "forest.csv"))
forest_area   <- read.csv(here("data", "forest_area.csv"))
brazil_loss   <- read.csv(here("data", "brazil_loss.csv"))
soybean_use   <- read.csv(here("data", "soybean_use.csv"))
vegetable_oil <- read.csv(here("data", "vegetable_oil.csv"))
total_forest  <- read.csv(here("data", "forest-area-km.csv"))
deforestation_by_source <- read.csv(here("data", "deforestation_by_source.csv"))
```

## Our Dataset {auto-animate="true"}

-   "Global Deforestation" dataset from "Our World in Data", [tidytuesday](https://github.com/rfordatascience/tidytuesday/tree/master/data/2021/2021-04-06)

-   Data looks at global deforestation trends and soybean production in Brazil

-   Our Data:

    -   `forest` dataset
    -   `soybean_use` data

## Our Dataset {auto-animate="true"}

::: columns
::: {.column width="70%"}
**Aim:** Provide critical insights into the ever-evolving dynamics of global forests and the influence of soybean consumption, contributing to a better understanding of essential environmental conservation and sustainable land management practices.
:::

::: {.column width="30%"}
![Source: https://gifer.com](images/presentation/groot.gif){fig-align="right" width="450"}
:::
:::

## Question 1

**What does the global forest area look like over past decades?**

-   The primary goal of this presentation is to demonstrate changes in forest cover from 1990 to 2015.

-   Decrease in forest cover over the past few decades.

-   While certain countries show an increase in forest cover, we are still losing our battle against deforestation.

-   International efforts, such as the `United Nations REDD+` program, aim to reduce deforestation and promote sustainable forest management to combat its adverse impacts on a global scale.

## Approach {.smaller}

```{r world_data, message=FALSE, include=FALSE}
# World data from maps
world <- map_data("world")

# Extracting unique countries from the world dataset and storing them in a tibble
unique_countries <- world |>
  select(region) |>       # region is the column which is having country names info
  unique() |>             # getting unique country names
  as_tibble()

# Removing Antarctica from the world data
world <- subset(world, region != "Antarctica")
```

-   Getting geographical data from `maps` package
-   Roots of the approach

```{r process_forest_function, message=FALSE, echo=TRUE}
#| code-fold: true
#| code-summary: "Pre-processing Function"

# function to pre process the forest dataset
# input  : dataset - tibble
#          unique_countries - tibble
# output : filtered_data - tibble

processForest <- function (dataset, unique_countries) {
  filtered_data <- dataset |>
    # filtering only entity, year and net_forest_conversion columns
    select(entity, year, net_forest_conversion) |>
    # getting all the countires which are not present in forest dataset for a specific years
    # bind_rows() is used combine combine rows of two data frames
    bind_rows(
      # anti_join() is used to return only the rows from the first dataset that isn't having matching rows in the second dataset based on specified key columns
      anti_join(unique_countries, dataset, by = c("region" = "entity")) |>
        # adding year and net_forest_conversion for that specific year as NA
        mutate(year = dataset[1, "year"], net_forest_conversion = NA)
    ) |>
    # renaming USA and UK so that both these countries are matching in world dataset and forest dataset
    mutate(
      entity = case_when(
        entity == "United States" ~ "USA",
        entity == "United Kingdom" ~ "UK",
        TRUE ~ entity
      )
    ) |>
    # creating a categorical variable forest_converstion to group countries based on their forest conversion
    mutate(
      entity = coalesce(entity, region),
      forest_converstion = case_when(
        net_forest_conversion < -400000 ~ "<-400k",
        net_forest_conversion < -200000 ~ "-400k to -200k",
        net_forest_conversion < -100000 ~ "-200k to -100k",
        net_forest_conversion < 0 ~ "-100k to 0",
        net_forest_conversion < 100000 ~ "0 to 100k",
        net_forest_conversion < 200000 ~ "100k to 200k",
        net_forest_conversion < 400000 ~ "200k to 400k",
        is.na(net_forest_conversion) ~ NA_character_,
        TRUE ~ ">400k"
      )
    ) |>
    # ordering forest_converstion column using factors based on the created categories
    mutate(
      forest_converstion = as_factor(forest_converstion) |>
        fct_relevel(
          "<-400k",
          "-400k to -200k",
          "-200k to -100k",
          "-100k to 0",
          "0 to 100k",
          "100k to 200k",
          "200k to 400k",
          ">400k"
        )
    )
  return(filtered_data)
}
```

```{r split_forest_data, message=FALSE, include=FALSE}
# Dividing data into tibbles based on year and it creates a list of tibbles
forest_decades <- split(forest, f = forest$year)

# Implementing the pre processing function on top of the created split tibbles
# lapply() is used for applying a function on top of any list
filtered_forests <- lapply(forest_decades, function(forest_ds) {
  processForest(forest_ds, unique_countries)
})
```

```{r highlightingCountriesWithmajorChange, message=FALSE, include=FALSE}
# function to filter countries which are having noteworthy forest conversion
# input  : dataset - tibble
#          variable - column character
# output : highlight_data - tibble

filterCountries <- function (dataset, variable){
  highlight_data <- subset(dataset, variable %in% c("Brazil", "Tanzania", "China", "India", "Russia", "USA", "Australia"))
  return(highlight_data)
}

# filtering countries from world dataset using filter_countries
highlight_world <- filterCountries(world, world$region)

# filtering countries from filtered_forests dataset using filter_countries
highlight_filtered_data <- lapply(filtered_forests, function(forest_ds) {
  filterCountries(forest_ds, forest_ds$entity)
})
```

```{r colourMapping, message=FALSE, include=FALSE}
# color mapping for different forest conversion categories
color_mapping <-
  c(
    "<-400k"         = "#d73027",
    "-400k to -200k" = "#f46d43",
    "-200k to -100k" = "#fdae61",
    "-100k to 0"     = "#fee08b",
    "0 to 100k"      = "#d9ef8b",
    "100k to 200k"   = "#a6d96a",
    "200k to 400k"   = "#66bd63",
    ">400k"          = "#1a9850"
  )
```

-   Leveraging `geom_map()` from ggplot
-   Branches of the approach

```{r world_plot_function, message=FALSE, echo=TRUE}
#| code-fold: true
#| code-summary: "Function used to generate the plot"

# Function for creating the ggplot map plot
# Using the filtered_forests$`2000` dataset created earlier as a data source
# using entity as map_id for first layer
# using forest_convestion as fill aesthetic and word as map for second layer
# using highlight_filtered_data$`2000` as another dataset for creating another map layer
# using entity as map_id,forest_convestion as fill aesthetic and highlight_world as map for third layer

# input  : year - integer
# output : world_plot - plot object

generateForestConversionPlot <- function(year) {
  world_plot <- ggplot(filtered_forests[[as.character(year)]], aes(map_id = entity)) +
    geom_map(
      aes(fill = forest_converstion),
      map   = world,
      color = "#B2BEB5",
      linewidth = 0.25,
      linetype  = "blank"
    ) +
    geom_map(
      data = highlight_filtered_data[[as.character(year)]],
      aes(map_id = entity, fill = forest_converstion),
      map   = highlight_world,
      color = "#71797E",
      show.legend = F
    ) +
    expand_limits(x = world$long, y = world$lat) +
    scale_fill_manual(values = color_mapping, na.value = "#F2F3F4") +
    coord_fixed(ratio = 1) +
    labs(
      title = paste("Net Forest Conversion by Country in", year),
      subtitle = "Net change in forest area measures forest expansion minus deforestation",
      caption = "Data source: Our World in Data",
      fill = "Net Forest Conversion (hectares)"
    ) +
    theme_void() +
    theme(
      legend.position = "bottom",
      legend.direction = "horizontal",
      plot.title = element_text(size = 19, face = "bold", hjust = 0.5),
      plot.subtitle = element_text(size = 15, color = "azure4", hjust = 0.5),
      plot.caption = element_text(size = 12, color = "azure4", hjust = 0.95)
    ) +
    guides(
      fill = guide_legend(
        nrow = 1,
        direction = "horizontal",
        title.position = "top",
        title.hjust = 0.5,
        label.position = "bottom",
        label.hjust = 1,
        label.vjust = 1,
        label.theme = element_text(lineheight = 0.25, size = 9),
        keywidth = 1,
        keyheight = 0.5
      )
    )
  return(world_plot)
}
```

-   Creating an animation of the generated plots

```{r allDecades_plot, message=FALSE}
# Generating plots for different decades
plot_1990 <- generateForestConversionPlot(1990)
plot_2000 <- generateForestConversionPlot(2000)
plot_2010 <- generateForestConversionPlot(2010)
plot_2015 <- generateForestConversionPlot(2015)
```

## Dynamic display of forest conversion across the countries over the past decades {.smaller auto-animate="true"}

-   Notable positive shifts occurred in the `2000s` and `2010s`, particularly in countries like the `USA`, `Russia`, `Australia`, `China`, and `India`.

-   Significant portion of *South America* and *Africa* continues to bear the brunt of deforestation, with no signs of slowing down

```{r saving_plots, message=FALSE, include=FALSE}
# Function for saving plot for animation
# input  : world_forest_plot - plot_object,
#          file_path - file path to save

generatePlotforAnimation <- function(world_forest_plot, file_path) {
  # generating the plot
  updated_world_plot <- world_forest_plot +
    theme(
      plot.title    = element_text(size = 24),
      plot.subtitle = element_text(size = 18),
      plot.caption  = element_text(size = 15),
      legend.key.size = unit(2, "lines"),
      legend.text = element_text(size = 14),
      legend.title = element_text(size = 16, face = "bold")
    )
  
  # saving the plot as an image file
  ggsave(updated_world_plot, 
       filename = file_path,
       height   = 8, 
       width    = 15, 
       unit     = "in", 
       dpi      = 120)
  
}

generatePlotforAnimation(plot_1990, "images/presentation/q1/forest_plot_1990.jpg")
generatePlotforAnimation(plot_2000, "images/presentation/q1/forest_plot_2000.jpg")
generatePlotforAnimation(plot_2010, "images/presentation/q1/forest_plot_2010.jpg")
generatePlotforAnimation(plot_2015, "images/presentation/q1/forest_plot_2015.jpg")
```

```{r savingas_GIF, message=FALSE}
#| code-fold: true
#| code-summary: "Animation of the plots"

# making gif using gganimate pacakge

forest_plots <- list.files(path = "images/presentation/q1/", full.names = TRUE)
forest_plot_list <- lapply(forest_plots, image_read)

# joining all the saved images
joined_plots <- image_join(forest_plot_list)

# animating the images using image_animate() and resetting the resolution
# setting fps = 1
forest_animation <- image_animate(image_scale(joined_plots, "6000x4000"), fps = 0.5)

forest_animation
```

## Challenges faced {auto-animate="true"}

-   Lack of geographical data in the dataset
-   Handling `NA` data and countries with no data
-   Getting the legend right!
-   Rendering issue due to too much `ink` being used on the plot

## Question 2 {.smaller}

**How has the production of Soybean in Brazil changed over time, and how does it impact the afforestation or deforestation rates?**

-   Our central question revolves around the historical evolution of soybean consumption and its potential implications for afforestation and deforestation rates in this vital agricultural region.

-   Our visual representation of this data employs the versatility of ggplot, particularly using `geom_line()` and `geom_point()` methods to construct time series plots.

-   These plots provide a dynamic illustration of the trends in soybean production in Brazil, shedding light on the growth and fluctuations in this vital agricultural sector.

## Approach {.smaller}

```{r q2brazil_process, message=FALSE, echo=TRUE}
#| code-fold: true
#| code-summary: "Pre-processing of soybean and forest data"
#Function to pre-process the total_forest, soybean_use and forest_area datasets
#Input : total_forest- tibble
#        soybean_use- tibble
#        forest_area- tibble
#Output: soybean_brazil- tibble
#        forest_brazil- tibble


#Cleaning total_forest table
total_forest_cleaned <- clean_names(total_forest)

#Making a new column to calculate the total soybean consumption
soybean <- soybean_use |>
  mutate(total = human_food + animal_feed + processed)
#Some countries do not have consumption, and shows as 0. 
#Removing the rows if total=0
soybean <- subset(soybean, total != 0)

# Filter data for Brazil
soybean_brazil <- soybean |>
  filter(entity == "Brazil", year>= 1990&year<=2013)

# Filter data for Brazil forest: 
forest_brazil <- forest_area |>
  filter(entity == "Brazil",year>=1990&year<=2013)

#Finding total forest coverage per year
total_forest_world <- total_forest_cleaned |>
  filter(year >= 1990, year <= 2013, entity == "World") |>
  group_by(year)

# Left join to add total world forest coverage to the forest_brazil dataset
forest_brazil <- forest_brazil |>
  left_join(total_forest_world, by = "year")
 
#Finding actual total coverage for Brazil (percentage * total)
forest_brazil <- forest_brazil|>
  mutate(forest_area_brazil = forest_area.x * forest_area.y / 100)



```

```{r q2plot_soybean, message=FALSE, echo=TRUE}
#| code-fold: true
#| code-summary: "Plotting of soybean consumption in Brazil"
#Code for creating the time series plot
#Used the soybean_brazil dataset created earlier as a data source
#using year and total as x and y axis for first layer
#Plotting points over line to increase visibility as second layer
#Manual fill to show trend as positive
#Input: year and total- numeric
#Output: plot_soybean_brazil- plot object


# Create a line plot for Brazil soybean consumption
plot_soybean_brazil <- ggplot(soybean_brazil, aes(x = year, y = total, color = "Brazil")) +
  geom_line(linewidth = 2) +    #Plotting line plot of series
  geom_point(color = "#6E8B3D") +  #Plotting points for clarity
  labs(x = "\nYear", 
       y = "Total (in lb)\n", 
       title = "Soybean consumption in Brazil\n", 
       caption = "Jon Harmon | TidyTuesday") +
  theme_minimal() +
  theme(legend.position = "none", plot.title = element_text(size = 15)) +
  scale_y_continuous(labels = scales::label_number(scale = 1e-06, suffix = "M")) + #Cleaning long numbers
  scale_color_manual(values = c("Brazil" = "#a6d96a")) +
  scale_x_continuous(limits = c(1990, 2013), breaks = seq(1990, 2013, by = 2))    #Defining year range

#Saving plot to location, and defining custom width
ggsave(plot_soybean_brazil, 
       filename = "images/q2/plot_soybean_brazil.jpg", 
       height   = 8, 
       width    = 15, 
       unit     = "in", 
       dpi      = 120)



```

```{r q2plot_forest, message=FALSE, echo=TRUE}
#| code-fold: true
#| code-summary: "Plotting of forest coverage in Brazil"

#Code for creating the time series plot
#Used the forest_brazil dataset created earlier as a data source
#using year and total as x and y axis for first layer for line plot
#Plotting points over line to increase visibility as second layer
#Manual fill to show trend as negative
#Input: year and forest_area_brazil- numeric
#Output: plot_soybean_brazil- plot object


# Create a line plot for Brazil with points
plot_forest_brazil <- ggplot(forest_brazil, aes(x = year, y = forest_area_brazil, color = "Brazil")) +
  geom_line(linewidth = 2) +      #Plotting line plot of series
  geom_point(color="#fdae61") +   #Plotting points for clarity
  labs(x = "\nYear", 
       y = "Forest coverage (in hectares)\n", 
       title = "Forest coverage in Brazil\n", 
       caption= "Jon Harmon | TidyTuesday") +
  theme_minimal() +
  theme(legend.position = "none", plot.title = element_text(size = 15)) +
  scale_color_manual(values = c("Brazil" = "#fee08b"))+
  scale_x_continuous(limits = c(1990, 2013), breaks = seq(1990, 2013, by = 2))+    #Defining year range
  scale_y_continuous(labels = scales::label_number(scale = 1e-6, suffix = "M"))    #Cleaning long numbers

ggsave(plot_forest_brazil, 
       filename = "images/q2/plot_forest_brazil.jpg", 
       height   = 8, 
       width    = 15, 
       unit     = "in", 
       dpi      = 120)



```

## Outcome {.smaller auto-animate="true"}

-   Animation of soybean usage

```{r q2plot_forest_anim, message=FALSE}
#| code-fold: true
#| code-summary: "Animation of soybean usage"
#Code to animate the plot using gganimate package

# Animate the plot
anim_plot_soybean <- plot_soybean_brazil + transition_reveal(year)

# Save as an animated GIF
anim_save("soybean_brazil_animation.gif", anim_plot_soybean, renderer = gifski_renderer())

# Load the animated GIF
brazil_soybean_animation <- image_read("soybean_brazil_animation.gif")

# Display the animation
brazil_soybean_animation |>
  image_animate(fps = 25)

```

## Outcome {.smaller auto-animate="true"}

-   Animation of forest coverage

```{r q2plot_brazil_anim, message=FALSE}
#| code-fold: true
#| code-summary: "Animation of forest coverage"
#Animation of plot using gganimate package

# Animate the plot
anim_plot_forest <- plot_forest_brazil + transition_reveal(year)

# Save as an animated GIF
anim_save("forest_brazil_animation.gif", anim_plot_forest, renderer = gifski_renderer())

# Load the animated GIF
brazil_forest_animation <- image_read("forest_brazil_animation.gif")

# Display the animation
brazil_forest_animation |>
  image_animate(fps = 25)

```

## Analysis {.smaller}

-   The visualizations provide a clear depiction of the steady increase in soybean consumption in Brazil.

-   The data shows a remarkable increase, from approximately 16.4 million pounds of soybeans in 1990 to a staggering 36.87 million pounds in 2013.

-   The forest coverage in Brazil dropped from 588 million hectares in 1990 to 507 million hectares in 2013, representing a significant loss of 81 million hectares of forest land during this time.

-   This reduction in forest area is indicative of the environmental impact in Brazil.

-   The correlation between rising soybean consumption and decreasing forest coverage in Brazil underscores the need for sustainable agricultural practices and conservation efforts.

## I am Groot!?

::: columns
::: {.column width="50%"}
[**Thank You!**]{style="font-size: 46px; color: #546747; font-weight: bold;text-align: center"}

![Source: https://gifer.com/en/2rci](images/presentation/groot_hi.gif){fig-align="center" width="350"}
:::

::: {.column width="50%"}
[**Any Questions?**]{style="font-size: 46px; color: #546747; font-weight: bold;text-align: center"}

![Source: https://gifer.com](images/presentation/groot_focused.gif){fig-align="center" width="450"}
:::
:::
