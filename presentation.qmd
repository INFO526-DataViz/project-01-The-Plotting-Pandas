---
title: "Forests in Transition: Visualizing Global Deforestation"
subtitle: "INFO 526 - Fall 2023 - Project 1"
author: "The Plotting Pandas - Megan, Shakir, Maria, Eshaan, Bharath"
title-slide-attributes:
  data-background-image: images/presentation/rainforest_background_4.png
  data-background-size: stretch
  data-background-opacity: "0.8"
  data-slide-number: none
format:
  revealjs:
    theme:  ['data/customtheming.scss']
    transition: slide
    background-transition: fade
  
editor: visual
execute:
  warning: false
  echo: false
---

```{r load_packages, message=FALSE, include=FALSE}
# GETTING THE LIBRARIES
if (!require(pacman))
  install.packages(pacman)


pacman::p_load(tidyverse,
               tidytuesdayR,
               dplyr,
               janitor,
               dlookr,        # Exploratory data analysis
               here,          # Standardizes paths to data
               ggpubr,
               maps,
               gganimate,
               imager,
               magick,
               gifski,
               patchwork)
```

```{r ggplot_setup, message=FALSE, include=FALSE}
# setting theme for ggplot2
ggplot2::theme_set(ggplot2::theme_minimal(base_size = 14, base_family = "sans"))

# setting width of code output
options(width = 65)

# setting figure parameters for knitr
knitr::opts_chunk$set(
  fig.width = 8,        # 8" width
  fig.asp = 0.618,      # the golden ratio
  fig.retina = 1,       # dpi multiplier for displaying HTML output on retina
  fig.align = "center", # center align figures
  dpi = 140             # higher dpi, sharper image
)
```

```{r load_dataset, message=FALSE, include=FALSE}
# Getting the Data using the tidytuesdayR package 
deforestation_data <- tidytuesdayR::tt_load(2021, week = 15)

# Getting all the underlying data in the dataset
forest        <- deforestation_data$forest
forest_area   <- deforestation_data$forest_area
brazil_loss   <- deforestation_data$brazil_loss
soybean_use   <- deforestation_data$soybean_use
vegetable_oil <- deforestation_data$vegetable_oil
total_forest <- read.csv ("https://raw.githubusercontent.com/INFO526-DataViz/project-01-The-Plotting-Pandas/main/data/forest-area-km.csv")

# Data is read to deforestation_by_source from a raw csv file which is in github , as it is not being downloaded from the tidytuesdayR package.
deforestation_by_source <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-04-06/deforestation_by_source.csv')
```

## Introduction{auto-animate="true"}


-   \<info on our project\>

You can use plain text

::: columns
::: {.column width="40%"}
-   or bullet points[^1]
:::

::: {.column width="60%"}
or in two columns
:::
:::

## Introduction{auto-animate="true"}

![](images/presentation/groot.gif){fig-align="right" width="200"}

## Question 1

-   What does the global forest area look like over past decades, highlighting the trends of forest area conversion?

[^1]: And add footnotes

-   like

-   this

## Code

```{r world_data, message=FALSE, include=FALSE}
# World data from maps
world <- map_data("world")

# Extracting unique countries from the world dataset and storing them in a tibble
unique_countries <- world |>
  select(region) |>       # region is the column which is having country names info
  unique() |>             # getting unique country names
  as_tibble()

# Removing Antarctica from the world data
world <- subset(world, region != "Antarctica")
```

```{r process_forest_function, message=FALSE, echo=TRUE}
#| code-fold: true
#| code-summary: "Glimpse of processForest Function"

# function to pre process the forest dataset
# input  : dataset - tibble
#          unique_countries - tibble
# output : filtered_data - tibble

processForest <- function (dataset, unique_countries) {
  filtered_data <- dataset |>
    # filtering only entity, year and net_forest_conversion columns
    select(entity, year, net_forest_conversion) |>
    # getting all the countires which are not present in forest dataset for a specific years
    # bind_rows() is used combine combine rows of two data frames
    bind_rows(
      # anti_join() is used to return only the rows from the first dataset that isn't having matching rows in the second dataset based on specified key columns
      anti_join(unique_countries, dataset, by = c("region" = "entity")) |>
        # adding year and net_forest_conversion for that specific year as NA
        mutate(year = dataset[1, "year"]$year, net_forest_conversion = NA)
    ) |>
    # renaming USA and UK so that both these countries are matching in world dataset and forest dataset
    mutate(
      entity = case_when(
        entity == "United States" ~ "USA",
        entity == "United Kingdom" ~ "UK",
        TRUE ~ entity
      )
    ) |>
    # creating a categorical variable forest_converstion to group countries based on their forest conversion
    mutate(
      entity = coalesce(entity, region),
      forest_converstion = case_when(
        net_forest_conversion < -400000 ~ "<-400k",
        net_forest_conversion < -200000 ~ "-400k to -200k",
        net_forest_conversion < -100000 ~ "-200k to -100k",
        net_forest_conversion < 0 ~ "-100k to 0",
        net_forest_conversion < 100000 ~ "0 to 100k",
        net_forest_conversion < 200000 ~ "100k to 200k",
        net_forest_conversion < 400000 ~ "200k to 400k",
        is.na(net_forest_conversion) ~ NA_character_,
        TRUE ~ ">400k"
      )
    ) |>
    # ordering forest_converstion column using factors based on the created categories
    mutate(
      forest_converstion = as_factor(forest_converstion) |>
        fct_relevel(
          "<-400k",
          "-400k to -200k",
          "-200k to -100k",
          "-100k to 0",
          "0 to 100k",
          "100k to 200k",
          "200k to 400k",
          ">400k"
        )
    )
  return(filtered_data)
}
```

```{r split_forest_data, message=FALSE, include=FALSE}
# Dividing data into tibbles based on year and it creates a list of tibbles
forest_decades <- split(forest, f = forest$year)

# Implementing the pre processing function on top of the created split tibbles
# lapply() is used for applying a function on top of any list
filtered_forests <- lapply(forest_decades, function(forest_ds) {
  processForest(forest_ds, unique_countries)
})
```

```{r highlightingCountriesWithmajorChange, message=FALSE, include=FALSE}
# function to filter countries which are having noteworthy forest conversion
# input  : dataset - tibble
#          variable - column character
# output : highlight_data - tibble

filterCountries <- function (dataset, variable){
  highlight_data <- subset(dataset, variable %in% c("Brazil", "Tanzania", "China", "India", "Russia", "USA", "Australia"))
  return(highlight_data)
}

# filtering countries from world dataset using filter_countries
highlight_world <- filterCountries(world, world$region)

# filtering countries from filtered_forests dataset using filter_countries
highlight_filtered_data <- lapply(filtered_forests, function(forest_ds) {
  filterCountries(forest_ds, forest_ds$entity)
})
```

```{r colourMapping, message=FALSE, include=FALSE}
# color mapping for different forest conversion categories
color_mapping <-
  c(
    "<-400k"         = "#d73027",
    "-400k to -200k" = "#f46d43",
    "-200k to -100k" = "#fdae61",
    "-100k to 0"     = "#fee08b",
    "0 to 100k"      = "#d9ef8b",
    "100k to 200k"   = "#a6d96a",
    "200k to 400k"   = "#66bd63",
    ">400k"          = "#1a9850"
  )
```

```{r world_plot_function, message=FALSE, echo=TRUE}
#| code-fold: true
#| code-summary: "Function used to generate the plot"

# Function for creating the ggplot map plot
# Using the filtered_forests$`2000` dataset created earlier as a data source
# using entity as map_id for first layer
# using forest_convestion as fill aesthetic and word as map for second layer
# using highlight_filtered_data$`2000` as another dataset for creating another map layer
# using entity as map_id,forest_convestion as fill aesthetic and highlight_world as map for third layer

# input  : year - integer
# output : world_plot - plot object

generateForestConversionPlot <- function(year) {
  world_plot <- ggplot(filtered_forests[[as.character(year)]], aes(map_id = entity)) +
    geom_map(
      aes(fill = forest_converstion),
      map   = world,
      color = "#B2BEB5",
      linewidth = 0.25,
      linetype  = "blank"
    ) +
    geom_map(
      data = highlight_filtered_data[[as.character(year)]],
      aes(map_id = entity, fill = forest_converstion),
      map   = highlight_world,
      color = "#71797E",
      show.legend = F
    ) +
    expand_limits(x = world$long, y = world$lat) +
    scale_fill_manual(values = color_mapping, na.value = "#F2F3F4") +
    coord_fixed(ratio = 1) +
    labs(
      title = paste("Net Forest Conversion by Country in", year),
      subtitle = "Net change in forest area measures forest expansion minus deforestation",
      caption = "Data source: Our World in Data",
      fill = "Net Forest Conversion (hectares)"
    ) +
    theme_void() +
    theme(
      legend.position = "bottom",
      legend.direction = "horizontal",
      plot.title = element_text(size = 19, face = "bold", hjust = 0.5),
      plot.subtitle = element_text(size = 15, color = "azure4", hjust = 0.5),
      plot.caption = element_text(size = 12, color = "azure4", hjust = 0.95)
    ) +
    guides(
      fill = guide_legend(
        nrow = 1,
        direction = "horizontal",
        title.position = "top",
        title.hjust = 0.5,
        label.position = "bottom",
        label.hjust = 1,
        label.vjust = 1,
        label.theme = element_text(lineheight = 0.25, size = 9),
        keywidth = 1,
        keyheight = 0.5
      )
    )
  return(world_plot)
}
```

```{r allDecades_plot, message=FALSE}
# Generating plots for different decades
plot_1990 <- generateForestConversionPlot(1990)
plot_2000 <- generateForestConversionPlot(2000)
plot_2010 <- generateForestConversionPlot(2010)
plot_2015 <- generateForestConversionPlot(2015)
```

## Plot and text {auto-animate="true"}

::: columns
::: {.column width="20%"}
-   Some text

-   goes here
:::

::: {.column width="80%"}
```{r plot_1990, warning=FALSE, fig.width=8}
plot_1990
```
:::
:::

## Plot and text {auto-animate="true"}
::: columns
::: {.column width="20%"}
-   Some text

-   goes here
:::

::: {.column width="80%"}
```{r plot_2000, warning=FALSE, fig.width8}
plot_2000
```
:::
:::
## Plot and text {auto-animate="true"}

::: columns
::: {.column width="20%"}
-   Some text

-   goes here
:::

::: {.column width="80%"}
```{r plot_2015, warning=FALSE, fig.width=8}
plot_2015
```
:::
:::

## Animation of the plots
GIF of the world forest conversion

```{r saving_plots, message=FALSE, include=FALSE}
# Function for saving plot for animation
# input  : world_forest_plot - plot_object,
#          file_path - file path to save

generatePlotforAnimation <- function(world_forest_plot, file_path) {
  # generating the plot
  updated_world_plot <- world_forest_plot +
    theme(
      plot.title    = element_text(size = 24),
      plot.subtitle = element_text(size = 18),
      plot.caption  = element_text(size = 15),
      legend.key.size = unit(2, "lines"),
      legend.text = element_text(size = 14),
      legend.title = element_text(size = 16, face = "bold")
    )
  
  # saving the plot as an image file
  ggsave(updated_world_plot, 
       filename = file_path,
       height   = 8, 
       width    = 15, 
       unit     = "in", 
       dpi      = 120)
  
}

generatePlotforAnimation(plot_1990, "images/presentation/q1/forest_plot_1990.jpg")
generatePlotforAnimation(plot_2000, "images/presentation/q1/forest_plot_2000.jpg")
generatePlotforAnimation(plot_2010, "images/presentation/q1/forest_plot_2010.jpg")
generatePlotforAnimation(plot_2015, "images/presentation/q1/forest_plot_2015.jpg")
```

```{r savingas_GIF, message=FALSE, echo=TRUE}
#| code-fold: true
#| code-summary: "Animation of the plots"

# making gif using gganimate pacakge

forest_plots <- list.files(path = "images/presentation/q1/", full.names = TRUE)
forest_plot_list <- lapply(forest_plots, image_read)

# joining all the saved images
joined_plots <- image_join(forest_plot_list)

# animating the images using image_animate() and restting the resolution
# setting fps = 1
forest_animation <- image_animate(image_scale(joined_plots, "6000x4000"), fps = 0.5)

forest_animation
```
